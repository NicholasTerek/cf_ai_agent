{
  "version": 3,
  "sources": ["../../../src/static.ts", "../../../src/memory_do.ts", "../../../src/worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-SHPEyg/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-SHPEyg/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\nicky\\OneDrive\\Desktop\\ai\\cf_ai_agents_demo\\.wrangler\\tmp\\dev-5pqsVU",
  "sourcesContent": ["export const INDEX_HTML = `<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Cloudflare AI Agent \u2022 Global Intelligence Network</title>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/three-globe@2.24.0/dist/three-globe.min.js\"></script>\n  <style>\n    :root {\n      --bg-primary: #0a0e1a;\n      --bg-secondary: #0f1419;\n      --bg-tertiary: #1a1f2e;\n      --accent-primary: #00d4ff;\n      --accent-secondary: #0099cc;\n      --accent-glow: rgba(0, 212, 255, 0.3);\n      --text-primary: #ffffff;\n      --text-secondary: #a0a9c0;\n      --text-muted: #6b7280;\n      --border: rgba(255, 255, 255, 0.1);\n      --glass: rgba(255, 255, 255, 0.05);\n      --glass-border: rgba(255, 255, 255, 0.1);\n    }\n\n    * { box-sizing: border-box; margin: 0; padding: 0; }\n    \n    body {\n      margin: 0;\n      padding: 0;\n      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: #000000; /* Pure black like Tunnel.dev */\n      color: var(--text-primary);\n      overflow: hidden;\n      height: 100vh;\n    }\n\n    /* Animated background particles */\n    .bg-particles {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 1;\n    }\n\n    .particle {\n      position: absolute;\n      width: 2px;\n      height: 2px;\n      background: var(--accent-primary);\n      border-radius: 50%;\n      opacity: 0.3;\n      animation: float 20s infinite linear;\n    }\n\n    @keyframes float {\n      0% { transform: translateY(100vh) translateX(0px); opacity: 0; }\n      10% { opacity: 0.3; }\n      90% { opacity: 0.3; }\n      100% { transform: translateY(-100px) translateX(100px); opacity: 0; }\n    }\n\n    /* 3D Globe container */\n    .globe-container {\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      width: 800px;\n      height: 800px;\n      z-index: 2;\n      pointer-events: all;\n      cursor: grab;\n    }\n\n    .globe-container:active {\n      cursor: grabbing;\n    }\n\n    #globe-canvas {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n    }\n\n    /* Tooltip for data points */\n    .globe-tooltip {\n      position: absolute;\n      background: rgba(0, 0, 0, 0.9);\n      color: white;\n      padding: 8px 12px;\n      border-radius: 6px;\n      font-size: 12px;\n      pointer-events: none;\n      z-index: 1000;\n      opacity: 0;\n      transition: opacity 0.2s;\n      border: 1px solid var(--accent-primary);\n    }\n\n    @keyframes rotate {\n      from { transform: rotate(0deg); }\n      to { transform: rotate(360deg); }\n    }\n\n    @keyframes pulse {\n      0%, 100% { opacity: 0.3; transform: scale(1); }\n      50% { opacity: 0.6; transform: scale(1.05); }\n    }\n\n    /* Header */\n    .header {\n      position: relative;\n      z-index: 10;\n      padding: 2rem 0;\n      text-align: center;\n      background: linear-gradient(180deg, rgba(15, 20, 25, 0.9) 0%, transparent 100%);\n      backdrop-filter: blur(20px);\n    }\n\n    .header h1 {\n      font-size: 2.5rem;\n      font-weight: 700;\n      background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      background-clip: text;\n      margin-bottom: 0.5rem;\n      text-shadow: 0 0 30px var(--accent-glow);\n    }\n\n    .header .subtitle {\n      font-size: 1rem;\n      color: var(--text-secondary);\n      font-weight: 400;\n    }\n\n    /* Chat interface */\n    .chat-container {\n      position: fixed;\n      bottom: 2rem;\n      right: 2rem;\n      width: 400px;\n      height: 500px;\n      background: rgba(26, 31, 46, 0.8);\n      backdrop-filter: blur(20px);\n      border: 1px solid var(--glass-border);\n      border-radius: 20px;\n      z-index: 10;\n      display: flex;\n      flex-direction: column;\n      box-shadow: \n        0 20px 40px rgba(0, 0, 0, 0.3),\n        0 0 0 1px rgba(255, 255, 255, 0.05),\n        inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    }\n\n    .chat-header {\n      padding: 1.5rem;\n      border-bottom: 1px solid var(--border);\n      background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(0, 153, 204, 0.05) 100%);\n      border-radius: 20px 20px 0 0;\n    }\n\n    .chat-header h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n      color: var(--text-primary);\n      margin-bottom: 0.25rem;\n    }\n\n    .chat-header p {\n      font-size: 0.875rem;\n      color: var(--text-secondary);\n      opacity: 0.8;\n    }\n\n    .chat-messages {\n      flex: 1;\n      padding: 1rem;\n      overflow-y: auto;\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n\n    .message {\n      padding: 0.875rem 1.125rem;\n      border-radius: 16px;\n      max-width: 85%;\n      font-size: 0.9rem;\n      line-height: 1.5;\n      position: relative;\n    }\n\n    .message.user {\n      align-self: flex-end;\n      background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);\n      color: white;\n      box-shadow: 0 4px 12px rgba(0, 212, 255, 0.3);\n    }\n\n    .message.assistant {\n      align-self: flex-start;\n      background: rgba(255, 255, 255, 0.05);\n      border: 1px solid rgba(255, 255, 255, 0.1);\n      color: var(--text-primary);\n    }\n\n    .chat-input {\n      padding: 1rem;\n      border-top: 1px solid var(--border);\n      display: flex;\n      gap: 0.75rem;\n      background: rgba(15, 20, 25, 0.5);\n      border-radius: 0 0 20px 20px;\n    }\n\n    .chat-input textarea {\n      flex: 1;\n      background: rgba(255, 255, 255, 0.05);\n      border: 1px solid rgba(255, 255, 255, 0.1);\n      border-radius: 12px;\n      padding: 0.75rem;\n      color: var(--text-primary);\n      font-family: inherit;\n      font-size: 0.9rem;\n      resize: none;\n      outline: none;\n      transition: all 0.2s ease;\n    }\n\n    .chat-input textarea:focus {\n      border-color: var(--accent-primary);\n      box-shadow: 0 0 0 2px rgba(0, 212, 255, 0.2);\n    }\n\n    .chat-input textarea::placeholder {\n      color: var(--text-muted);\n    }\n\n    .send-btn {\n      background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);\n      border: none;\n      border-radius: 12px;\n      padding: 0.75rem 1.25rem;\n      color: white;\n      font-weight: 600;\n      font-size: 0.9rem;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      box-shadow: 0 4px 12px rgba(0, 212, 255, 0.3);\n    }\n\n    .send-btn:hover:not(:disabled) {\n      transform: translateY(-1px);\n      box-shadow: 0 6px 16px rgba(0, 212, 255, 0.4);\n    }\n\n    .send-btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    /* Stats overlay */\n    .stats-overlay {\n      position: fixed;\n      top: 2rem;\n      left: 2rem;\n      background: rgba(26, 31, 46, 0.8);\n      backdrop-filter: blur(20px);\n      border: 1px solid var(--glass-border);\n      border-radius: 16px;\n      padding: 1.5rem;\n      z-index: 10;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n    }\n\n    .stat-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 0.75rem;\n    }\n\n    .stat-item:last-child {\n      margin-bottom: 0;\n    }\n\n    .stat-label {\n      font-size: 0.875rem;\n      color: var(--text-secondary);\n    }\n\n    .stat-value {\n      font-size: 1rem;\n      font-weight: 600;\n      color: var(--accent-primary);\n    }\n\n    /* Responsive design */\n    @media (max-width: 768px) {\n      .globe-container {\n        width: 500px;\n        height: 500px;\n      }\n      \n      .chat-container {\n        position: fixed;\n        bottom: 0;\n        right: 0;\n        left: 0;\n        width: 100%;\n        height: 60vh;\n        border-radius: 20px 20px 0 0;\n      }\n      \n      .stats-overlay {\n        top: 1rem;\n        left: 1rem;\n        right: 1rem;\n        width: auto;\n      }\n      \n      .header h1 {\n        font-size: 2rem;\n      }\n    }\n\n    /* Scrollbar styling */\n    .chat-messages::-webkit-scrollbar {\n      width: 4px;\n    }\n\n    .chat-messages::-webkit-scrollbar-track {\n      background: transparent;\n    }\n\n    .chat-messages::-webkit-scrollbar-thumb {\n      background: rgba(0, 212, 255, 0.3);\n      border-radius: 2px;\n    }\n\n    .chat-messages::-webkit-scrollbar-thumb:hover {\n      background: rgba(0, 212, 255, 0.5);\n    }\n  </style>\n</head>\n<body>\n  <!-- Animated background particles -->\n  <div class=\"bg-particles\" id=\"particles\"></div>\n\n  <!-- 3D Interactive Globe -->\n  <div class=\"globe-container\">\n    <canvas id=\"globe-canvas\"></canvas>\n  </div>\n  \n  <!-- Tooltip for globe interactions -->\n  <div class=\"globe-tooltip\" id=\"globe-tooltip\"></div>\n\n  <!-- Header -->\n  <div class=\"header\">\n    <h1>Cloudflare AI Agent</h1>\n    <p class=\"subtitle\">Global Intelligence Network \u2022 Powered by Llama 3.3</p>\n  </div>\n\n  <!-- Stats overlay -->\n  <div class=\"stats-overlay\">\n    <div class=\"stat-item\">\n      <span class=\"stat-label\">Model</span>\n      <span class=\"stat-value\">Llama 3.3 70B</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-label\">Runtime</span>\n      <span class=\"stat-value\">Workers AI</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-label\">Memory</span>\n      <span class=\"stat-value\">Durable Objects</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-label\">Status</span>\n      <span class=\"stat-value\" id=\"status\">Online</span>\n    </div>\n  </div>\n\n  <!-- Chat interface -->\n  <div class=\"chat-container\">\n    <div class=\"chat-header\">\n      <h3>AI Assistant</h3>\n      <p>Ask me anything about technology, code, or the world</p>\n    </div>\n    <div class=\"chat-messages\" id=\"chat\"></div>\n    <div class=\"chat-input\">\n      <textarea id=\"input\" placeholder=\"Type your message...\" rows=\"1\"></textarea>\n      <button class=\"send-btn\" id=\"send\">Send</button>\n    </div>\n  </div>\n\n  <script type=\"module\" src=\"/app.js\"></script>\n</body>\n</html>`;\n\nexport const APP_JS = `// ACTUAL GitHub Globe Implementation (from janarosmonaliev/github-globe)\nvar renderer, camera, scene, controls;\nlet mouseX = 0;\nlet mouseY = 0;\nlet windowHalfX = 300;\nlet windowHalfY = 300;\nvar Globe;\n\n// Embedded data from the actual GitHub Globe repository\nconst countries = {\"type\": \"FeatureCollection\", \"features\": [{\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"USA\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[-74, 40], [-122, 37]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"GBR\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[0, 51]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"JPN\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[139, 35]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"KOR\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[127, 37]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"THA\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[100, 14]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"RUS\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[37, 55]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"UZB\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[64, 41]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"IDN\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[107, -6]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"KAZ\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[68, 48]]]}}, {\"type\": \"Feature\", \"properties\": {\"ISO_A3\": \"MYS\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[101, 4]]]}}]};\n\nconst travelHistory = {\"type\": \"FlightsCollection\", \"flights\": [\n  {\"type\": \"flight\", \"order\": 1, \"from\": \"NYC\", \"to\": \"LON\", \"status\": true, \"startLat\": 40.7128, \"startLng\": -74.0060, \"endLat\": 51.5074, \"endLng\": -0.1278, \"arcAlt\": 0.4},\n  {\"type\": \"flight\", \"order\": 2, \"from\": \"LON\", \"to\": \"TOK\", \"status\": true, \"startLat\": 51.5074, \"startLng\": -0.1278, \"endLat\": 35.6762, \"endLng\": 139.6503, \"arcAlt\": 0.5},\n  {\"type\": \"flight\", \"order\": 3, \"from\": \"TOK\", \"to\": \"SYD\", \"status\": true, \"startLat\": 35.6762, \"startLng\": 139.6503, \"endLat\": -33.8688, \"endLng\": 151.2093, \"arcAlt\": 0.3},\n  {\"type\": \"flight\", \"order\": 4, \"from\": \"SYD\", \"to\": \"LAX\", \"status\": true, \"startLat\": -33.8688, \"startLng\": 151.2093, \"endLat\": 34.0522, \"endLng\": -118.2437, \"arcAlt\": 0.6},\n  {\"type\": \"flight\", \"order\": 5, \"from\": \"LAX\", \"to\": \"NYC\", \"status\": true, \"startLat\": 34.0522, \"startLng\": -118.2437, \"endLat\": 40.7128, \"endLng\": -74.0060, \"arcAlt\": 0.2},\n  {\"type\": \"flight\", \"order\": 6, \"from\": \"PAR\", \"to\": \"BER\", \"status\": true, \"startLat\": 48.8566, \"startLng\": 2.3522, \"endLat\": 52.5200, \"endLng\": 13.4050, \"arcAlt\": 0.1},\n  {\"type\": \"flight\", \"order\": 7, \"from\": \"BER\", \"to\": \"MOS\", \"status\": true, \"startLat\": 52.5200, \"startLng\": 13.4050, \"endLat\": 55.7558, \"endLng\": 37.6176, \"arcAlt\": 0.15},\n  {\"type\": \"flight\", \"order\": 8, \"from\": \"MOS\", \"to\": \"BEI\", \"status\": true, \"startLat\": 55.7558, \"startLng\": 37.6176, \"endLat\": 39.9042, \"endLng\": 116.4074, \"arcAlt\": 0.25},\n  {\"type\": \"flight\", \"order\": 9, \"from\": \"BEI\", \"to\": \"SEO\", \"status\": true, \"startLat\": 39.9042, \"startLng\": 116.4074, \"endLat\": 37.5665, \"endLng\": 126.9780, \"arcAlt\": 0.08},\n  {\"type\": \"flight\", \"order\": 10, \"from\": \"SEO\", \"to\": \"TOK\", \"status\": true, \"startLat\": 37.5665, \"startLng\": 126.9780, \"endLat\": 35.6762, \"endLng\": 139.6503, \"arcAlt\": 0.1},\n  {\"type\": \"flight\", \"order\": 11, \"from\": \"MUM\", \"to\": \"DUB\", \"status\": true, \"startLat\": 19.0760, \"startLng\": 72.8777, \"endLat\": 25.2048, \"endLng\": 55.2708, \"arcAlt\": 0.2},\n  {\"type\": \"flight\", \"order\": 12, \"from\": \"DUB\", \"to\": \"LON\", \"status\": true, \"startLat\": 25.2048, \"startLng\": 55.2708, \"endLat\": 51.5074, \"endLng\": -0.1278, \"arcAlt\": 0.3},\n  {\"type\": \"flight\", \"order\": 13, \"from\": \"SAO\", \"to\": \"NYC\", \"status\": true, \"startLat\": -23.5505, \"startLng\": -46.6333, \"endLat\": 40.7128, \"endLng\": -74.0060, \"arcAlt\": 0.4},\n  {\"type\": \"flight\", \"order\": 14, \"from\": \"CAI\", \"to\": \"IST\", \"status\": true, \"startLat\": 30.0444, \"startLng\": 31.2357, \"endLat\": 41.0082, \"endLng\": 28.9784, \"arcAlt\": 0.12},\n  {\"type\": \"flight\", \"order\": 15, \"from\": \"IST\", \"to\": \"PAR\", \"status\": true, \"startLat\": 41.0082, \"startLng\": 28.9784, \"endLat\": 48.8566, \"endLng\": 2.3522, \"arcAlt\": 0.18},\n  {\"type\": \"flight\", \"order\": 16, \"from\": \"SIN\", \"to\": \"HKG\", \"status\": true, \"startLat\": 1.3521, \"startLng\": 103.8198, \"endLat\": 22.3193, \"endLng\": 114.1694, \"arcAlt\": 0.15},\n  {\"type\": \"flight\", \"order\": 17, \"from\": \"HKG\", \"to\": \"TOK\", \"status\": true, \"startLat\": 22.3193, \"startLng\": 114.1694, \"endLat\": 35.6762, \"endLng\": 139.6503, \"arcAlt\": 0.25},\n  {\"type\": \"flight\", \"order\": 18, \"from\": \"JNB\", \"to\": \"CAI\", \"status\": true, \"startLat\": -26.2041, \"startLng\": 28.0473, \"endLat\": 30.0444, \"endLng\": 31.2357, \"arcAlt\": 0.3},\n  {\"type\": \"flight\", \"order\": 19, \"from\": \"MEX\", \"to\": \"LAX\", \"status\": true, \"startLat\": 19.4326, \"startLng\": -99.1332, \"endLat\": 34.0522, \"endLng\": -118.2437, \"arcAlt\": 0.2},\n  {\"type\": \"flight\", \"order\": 20, \"from\": \"TOR\", \"to\": \"LON\", \"status\": true, \"startLat\": 43.6532, \"startLng\": -79.3832, \"endLat\": 51.5074, \"endLng\": -0.1278, \"arcAlt\": 0.35}\n]};\n\nconst airportHistory = {\"type\": \"AirportsCollection\", \"airports\": [\n  {\"text\": \"NYC\", \"size\": 1.2, \"city\": \"New York\", \"lat\": \"40.7128\", \"lng\": \"-74.0060\"},\n  {\"text\": \"LON\", \"size\": 1.2, \"city\": \"London\", \"lat\": \"51.5074\", \"lng\": \"-0.1278\"},\n  {\"text\": \"TOK\", \"size\": 1.2, \"city\": \"Tokyo\", \"lat\": \"35.6762\", \"lng\": \"139.6503\"},\n  {\"text\": \"LAX\", \"size\": 1.1, \"city\": \"Los Angeles\", \"lat\": \"34.0522\", \"lng\": \"-118.2437\"},\n  {\"text\": \"SYD\", \"size\": 1.0, \"city\": \"Sydney\", \"lat\": \"-33.8688\", \"lng\": \"151.2093\"},\n  {\"text\": \"PAR\", \"size\": 1.1, \"city\": \"Paris\", \"lat\": \"48.8566\", \"lng\": \"2.3522\"},\n  {\"text\": \"BER\", \"size\": 1.0, \"city\": \"Berlin\", \"lat\": \"52.5200\", \"lng\": \"13.4050\"},\n  {\"text\": \"MOS\", \"size\": 1.0, \"city\": \"Moscow\", \"lat\": \"55.7558\", \"lng\": \"37.6176\"},\n  {\"text\": \"BEI\", \"size\": 1.1, \"city\": \"Beijing\", \"lat\": \"39.9042\", \"lng\": \"116.4074\"},\n  {\"text\": \"SEO\", \"size\": 1.0, \"city\": \"Seoul\", \"lat\": \"37.5665\", \"lng\": \"126.9780\"},\n  {\"text\": \"MUM\", \"size\": 1.0, \"city\": \"Mumbai\", \"lat\": \"19.0760\", \"lng\": \"72.8777\"},\n  {\"text\": \"DUB\", \"size\": 1.0, \"city\": \"Dubai\", \"lat\": \"25.2048\", \"lng\": \"55.2708\"},\n  {\"text\": \"SAO\", \"size\": 1.0, \"city\": \"S\u00E3o Paulo\", \"lat\": \"-23.5505\", \"lng\": \"-46.6333\"},\n  {\"text\": \"CAI\", \"size\": 1.0, \"city\": \"Cairo\", \"lat\": \"30.0444\", \"lng\": \"31.2357\"},\n  {\"text\": \"IST\", \"size\": 1.0, \"city\": \"Istanbul\", \"lat\": \"41.0082\", \"lng\": \"28.9784\"},\n  {\"text\": \"SIN\", \"size\": 1.0, \"city\": \"Singapore\", \"lat\": \"1.3521\", \"lng\": \"103.8198\"},\n  {\"text\": \"HKG\", \"size\": 1.0, \"city\": \"Hong Kong\", \"lat\": \"22.3193\", \"lng\": \"114.1694\"},\n  {\"text\": \"JNB\", \"size\": 1.0, \"city\": \"Johannesburg\", \"lat\": \"-26.2041\", \"lng\": \"28.0473\"},\n  {\"text\": \"MEX\", \"size\": 1.0, \"city\": \"Mexico City\", \"lat\": \"19.4326\", \"lng\": \"-99.1332\"},\n  {\"text\": \"TOR\", \"size\": 1.0, \"city\": \"Toronto\", \"lat\": \"43.6532\", \"lng\": \"-79.3832\"}\n]};\n\n// Initialize particle system\nfunction createParticles() {\n  const particlesContainer = document.getElementById('particles');\n  const particleCount = 30;\n  \n  for (let i = 0; i < particleCount; i++) {\n    const particle = document.createElement('div');\n    particle.className = 'particle';\n    particle.style.left = Math.random() * 100 + '%';\n    particle.style.animationDelay = Math.random() * 20 + 's';\n    particle.style.animationDuration = (15 + Math.random() * 10) + 's';\n    particlesContainer.appendChild(particle);\n  }\n}\n\n// EXACT GitHub Globe init function\nfunction init() {\n  const container = document.getElementById('globe-canvas');\n  \n  // Initialize renderer (adapted for canvas container)\n  renderer = new THREE.WebGLRenderer({ canvas: container, antialias: true });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(800, 800);\n\n  // Initialize scene, light (Tunnel.dev style)\n  scene = new THREE.Scene();\n  scene.add(new THREE.AmbientLight(0x333333, 0.4));\n  scene.background = new THREE.Color(0x000000); // Pure black background\n\n  // Initialize camera, light\n  camera = new THREE.PerspectiveCamera();\n  camera.aspect = 1;\n  camera.updateProjectionMatrix();\n\n  var dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n  dLight.position.set(-800, 2000, 400);\n  camera.add(dLight);\n\n  var dLight1 = new THREE.DirectionalLight(0x7982f6, 1);\n  dLight1.position.set(-200, 500, 200);\n  camera.add(dLight1);\n\n  var dLight2 = new THREE.PointLight(0x8566cc, 0.5);\n  dLight2.position.set(-200, 500, 200);\n  camera.add(dLight2);\n\n  camera.position.z = 300;\n  camera.position.x = 0;\n  camera.position.y = 0;\n\n  scene.add(camera);\n\n  // Additional effects\n  scene.fog = new THREE.Fog(0x535ef3, 400, 2000);\n\n  container.addEventListener(\"mousemove\", onMouseMove);\n}\n\n// Create Tunnel.dev style globe\nfunction initGlobe() {\n  // Always use the Tunnel.dev style wireframe globe\n  console.log('Creating Tunnel.dev style globe');\n  createFallbackGlobe();\n  return;\n  \n  if (typeof ThreeGlobe === 'undefined') {\n    console.log('ThreeGlobe not loaded, creating fallback');\n    createFallbackGlobe();\n    return;\n  }\n  \n  // Initialize the Globe with earth textures\n  Globe = new ThreeGlobe({\n    waitForGlobeReady: true,\n    animateIn: true,\n  })\n    .globeImageUrl('https://unpkg.com/three-globe/example/img/earth-blue-marble.jpg')\n    .bumpImageUrl('https://unpkg.com/three-globe/example/img/earth-topology.png')\n    .hexPolygonsData(countries.features)\n    .hexPolygonResolution(3)\n    .hexPolygonMargin(0.7)\n    .showAtmosphere(true)\n    .atmosphereColor(\"#3a228a\")\n    .atmosphereAltitude(0.25)\n    .hexPolygonColor((e) => {\n      if (\n        [\"KGZ\", \"KOR\", \"THA\", \"RUS\", \"UZB\", \"IDN\", \"KAZ\", \"MYS\"].includes(\n          e.properties.ISO_A3\n        )\n      ) {\n        return \"rgba(255,255,255, 1)\";\n      } else return \"rgba(255,255,255, 0.7)\";\n    });\n\n  // NOTE Arc animations with Tunnel.dev styling\n  setTimeout(() => {\n    Globe.arcsData(travelHistory.flights)\n      .arcColor((e) => {\n        return e.status ? \"#00ffff\" : \"#ff6666\"; // Cyan for active, red for errors\n      })\n      .arcAltitude((e) => {\n        return e.arcAlt;\n      })\n      .arcStroke((e) => {\n        return e.status ? 0.3 : 0.2; // Thinner lines\n      })\n      .arcDashLength(0.6)\n      .arcDashGap(2)\n      .arcDashAnimateTime(2000) // Slower animation\n      .arcsTransitionDuration(1500)\n      .arcDashInitialGap((e) => e.order * 0.5)\n      .labelsData(airportHistory.airports)\n      .labelColor(() => \"#00ffff\") // Cyan labels\n      .labelDotOrientation((e) => {\n        return e.text === \"NYC\" ? \"top\" : \"right\";\n      })\n      .labelDotRadius(0.2)\n      .labelSize((e) => e.size * 0.8) // Smaller labels\n      .labelText(\"city\")\n      .labelResolution(4)\n      .labelAltitude(0.01)\n      .pointsData(airportHistory.airports)\n      .pointColor(() => \"#00ffff\") // Cyan points\n      .pointsMerge(true)\n      .pointAltitude(0.05)\n      .pointRadius(0.03); // Smaller points\n  }, 1000);\n\n  Globe.rotateY(-Math.PI * (5 / 9));\n  Globe.rotateZ(-Math.PI / 6);\n  const globeMaterial = Globe.globeMaterial();\n  globeMaterial.color = new THREE.Color(0x3a228a);\n  globeMaterial.emissive = new THREE.Color(0x220038);\n  globeMaterial.emissiveIntensity = 0.1;\n  globeMaterial.shininess = 0.7;\n\n  scene.add(Globe);\n}\n\n// Create Tunnel.dev style dark wireframe globe\nfunction createFallbackGlobe() {\n  console.log('Creating Tunnel.dev style wireframe globe');\n  \n  // Dark sphere base\n  const globeGeometry = new THREE.SphereGeometry(120, 64, 64);\n  const globeMaterial = new THREE.MeshBasicMaterial({\n    color: 0x0a0a0a,\n    transparent: true,\n    opacity: 0.3\n  });\n  \n  Globe = new THREE.Mesh(globeGeometry, globeMaterial);\n  scene.add(Globe);\n  \n  // Main wireframe grid (like in the image)\n  const wireframeGeometry = new THREE.SphereGeometry(121, 32, 32);\n  const wireframeMaterial = new THREE.MeshBasicMaterial({\n    color: 0x333333,\n    wireframe: true,\n    transparent: true,\n    opacity: 0.4\n  });\n  const wireframe = new THREE.Mesh(wireframeGeometry, wireframeMaterial);\n  scene.add(wireframe);\n  \n  // Add continent outlines (simplified)\n  createContinentOutlines();\n  \n  // Add glowing connection points\n  createConnectionPoints();\n}\n\n// Create continent outlines like in Tunnel.dev\nfunction createContinentOutlines() {\n  const continentPaths = [\n    // North America outline (simplified)\n    [[-125, 50], [-125, 25], [-80, 25], [-80, 50], [-125, 50]],\n    // Europe outline\n    [[-10, 60], [30, 60], [30, 35], [-10, 35], [-10, 60]],\n    // Asia outline\n    [[60, 70], [140, 70], [140, 10], [60, 10], [60, 70]],\n    // Africa outline\n    [[-20, 35], [50, 35], [50, -35], [-20, -35], [-20, 35]],\n    // South America outline\n    [[-80, 10], [-35, 10], [-35, -55], [-80, -55], [-80, 10]],\n    // Australia outline\n    [[110, -10], [155, -10], [155, -45], [110, -45], [110, -10]]\n  ];\n  \n  continentPaths.forEach(path => {\n    const points = path.map(([lng, lat]) => {\n      const phi = (90 - lat) * (Math.PI / 180);\n      const theta = (lng + 180) * (Math.PI / 180);\n      const x = -(122 * Math.sin(phi) * Math.cos(theta));\n      const z = (122 * Math.sin(phi) * Math.sin(theta));\n      const y = (122 * Math.cos(phi));\n      return new THREE.Vector3(x, y, z);\n    });\n    \n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    const material = new THREE.LineBasicMaterial({\n      color: 0x666666,\n      transparent: true,\n      opacity: 0.6\n    });\n    const line = new THREE.Line(geometry, material);\n    scene.add(line);\n  });\n}\n\n// Create glowing connection points like in the image\nfunction createConnectionPoints() {\n  const connectionPoints = [\n    // Major tech hubs\n    { lat: 37.7749, lng: -122.4194, name: 'San Francisco' },\n    { lat: 40.7128, lng: -74.0060, name: 'New York' },\n    { lat: 51.5074, lng: -0.1278, name: 'London' },\n    { lat: 35.6762, lng: 139.6503, name: 'Tokyo' },\n    { lat: -33.8688, lng: 151.2093, name: 'Sydney' },\n    { lat: 52.5200, lng: 13.4050, name: 'Berlin' },\n    { lat: 55.7558, lng: 37.6176, name: 'Moscow' },\n    { lat: 39.9042, lng: 116.4074, name: 'Beijing' },\n    { lat: 1.3521, lng: 103.8198, name: 'Singapore' },\n    { lat: 19.0760, lng: 72.8777, name: 'Mumbai' }\n  ];\n  \n  connectionPoints.forEach(point => {\n    const phi = (90 - point.lat) * (Math.PI / 180);\n    const theta = (point.lng + 180) * (Math.PI / 180);\n    const x = -(123 * Math.sin(phi) * Math.cos(theta));\n    const z = (123 * Math.sin(phi) * Math.sin(theta));\n    const y = (123 * Math.cos(phi));\n    \n    // Glowing point\n    const pointGeometry = new THREE.SphereGeometry(1.5, 8, 8);\n    const pointMaterial = new THREE.MeshBasicMaterial({\n      color: 0x00ffff,\n      transparent: true,\n      opacity: 0.8\n    });\n    const pointMesh = new THREE.Mesh(pointGeometry, pointMaterial);\n    pointMesh.position.set(x, y, z);\n    scene.add(pointMesh);\n    \n    // Glow effect\n    const glowGeometry = new THREE.SphereGeometry(3, 8, 8);\n    const glowMaterial = new THREE.MeshBasicMaterial({\n      color: 0x00ffff,\n      transparent: true,\n      opacity: 0.2\n    });\n    const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);\n    glowMesh.position.set(x, y, z);\n    scene.add(glowMesh);\n  });\n}\n\n// EXACT GitHub Globe mouse and animate functions\nfunction onMouseMove(event) {\n  const rect = event.target.getBoundingClientRect();\n  mouseX = event.clientX - rect.left - 400;\n  mouseY = event.clientY - rect.top - 400;\n}\n\nfunction animate() {\n  camera.position.x +=\n    Math.abs(mouseX) <= 150\n      ? (mouseX / 2 - camera.position.x) * 0.005\n      : 0;\n  camera.position.y += (-mouseY / 2 - camera.position.y) * 0.005;\n  camera.lookAt(scene.position);\n  \n  // Auto-rotate globe (both ThreeGlobe and fallback)\n  if (Globe) {\n    if (Globe.rotation) {\n      // Fallback globe rotation\n      Globe.rotation.y += 0.003;\n    } else if (Globe.rotateY) {\n      // ThreeGlobe rotation\n      Globe.rotateY(Globe.rotation.y + 0.003);\n    }\n  }\n  \n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n\n// Add new arc for chat interactions\nfunction addChatArc(isUser = true) {\n  if (!Globe) return;\n  \n  const newArc = {\n    type: \"flight\",\n    startLat: (Math.random() - 0.5) * 180,\n    startLng: (Math.random() - 0.5) * 360,\n    endLat: (Math.random() - 0.5) * 180,\n    endLng: (Math.random() - 0.5) * 360,\n    status: isUser,\n    arcAlt: 0.2 + Math.random() * 0.3,\n    order: travelHistory.flights.length + 1\n  };\n  \n  travelHistory.flights.push(newArc);\n  Globe.arcsData([...travelHistory.flights]);\n}\n\n// Generate random flight arcs between real airports\nfunction addRandomFlightArc() {\n  if (!Globe || !Globe.arcsData) return;\n  \n  const airports = airportHistory.airports;\n  const fromAirport = airports[Math.floor(Math.random() * airports.length)];\n  const toAirport = airports[Math.floor(Math.random() * airports.length)];\n  \n  if (fromAirport === toAirport) return;\n  \n  const newArc = {\n    type: \"flight\",\n    startLat: parseFloat(fromAirport.lat),\n    startLng: parseFloat(fromAirport.lng),\n    endLat: parseFloat(toAirport.lat),\n    endLng: parseFloat(toAirport.lng),\n    status: Math.random() > 0.2, // 80% success rate\n    arcAlt: 0.1 + Math.random() * 0.4,\n    order: travelHistory.flights.length + 1,\n    from: fromAirport.text,\n    to: toAirport.text\n  };\n  \n  travelHistory.flights.push(newArc);\n  \n  // Keep only the last 50 arcs to prevent memory issues\n  if (travelHistory.flights.length > 50) {\n    travelHistory.flights = travelHistory.flights.slice(-50);\n  }\n  \n  Globe.arcsData([...travelHistory.flights]);\n}\n\n// Generate data activity arcs (like network traffic) - Tunnel.dev style\nfunction addDataActivityArc() {\n  if (!Globe) return;\n  \n  // For the wireframe globe, we'll add glowing connection lines\n  const startLat = (Math.random() - 0.5) * 160;\n  const startLng = (Math.random() - 0.5) * 360;\n  const endLat = (Math.random() - 0.5) * 160;\n  const endLng = (Math.random() - 0.5) * 360;\n  \n  // Convert to 3D coordinates\n  const startPos = latLngToVector3(startLat, startLng, 125);\n  const endPos = latLngToVector3(endLat, endLng, 125);\n  \n  // Create curved arc\n  const midPoint = new THREE.Vector3().addVectors(startPos, endPos).multiplyScalar(0.5);\n  midPoint.normalize().multiplyScalar(140); // Arc height\n  \n  const curve = new THREE.QuadraticBezierCurve3(startPos, midPoint, endPos);\n  const points = curve.getPoints(30);\n  \n  const arcGeometry = new THREE.BufferGeometry().setFromPoints(points);\n  const arcMaterial = new THREE.LineBasicMaterial({\n    color: Math.random() > 0.1 ? 0x00ffff : 0xff6666, // Cyan or red\n    transparent: true,\n    opacity: 0.6\n  });\n  \n  const arc = new THREE.Line(arcGeometry, arcMaterial);\n  scene.add(arc);\n  \n  // Remove arc after animation\n  setTimeout(() => {\n    scene.remove(arc);\n    arcGeometry.dispose();\n    arcMaterial.dispose();\n  }, 3000);\n}\n\n// Convert lat/lng to 3D coordinates\nfunction latLngToVector3(lat, lng, radius = 125) {\n  const phi = (90 - lat) * (Math.PI / 180);\n  const theta = (lng + 180) * (Math.PI / 180);\n  const x = -(radius * Math.sin(phi) * Math.cos(theta));\n  const z = (radius * Math.sin(phi) * Math.sin(theta));\n  const y = (radius * Math.cos(phi));\n  return new THREE.Vector3(x, y, z);\n}\n\n\n\n// Chat functionality\nconst chatEl = document.getElementById('chat');\nconst inputEl = document.getElementById('input');\nconst sendBtn = document.getElementById('send');\nconst statusEl = document.getElementById('status');\n\nlet messageCount = 0;\n\nfunction appendMessage(role, content) {\n  const el = document.createElement('div');\n  el.className = 'message ' + (role === 'user' ? 'user' : 'assistant');\n  el.textContent = content;\n  \n  if (role === 'assistant') {\n    el.style.opacity = '0';\n    el.style.transform = 'translateY(10px)';\n    chatEl.appendChild(el);\n    \n    requestAnimationFrame(() => {\n      el.style.transition = 'all 0.3s ease';\n      el.style.opacity = '1';\n      el.style.transform = 'translateY(0)';\n    });\n    \n    // Add green arc for AI response\n    addChatArc(false);\n  } else {\n    chatEl.appendChild(el);\n    // Add blue arc for user message\n    addChatArc(true);\n  }\n  \n  chatEl.scrollTop = chatEl.scrollHeight;\n  messageCount++;\n}\n\nasync function sendMessage() {\n  const content = inputEl.value.trim();\n  if (!content) return;\n  \n  inputEl.value = '';\n  appendMessage('user', content);\n  sendBtn.disabled = true;\n  sendBtn.textContent = 'Thinking...';\n  statusEl.textContent = 'Processing';\n  statusEl.style.color = '#fbbf24';\n\n  try {\n    const res = await fetch('/api/chat', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message: content })\n    });\n    \n    if (!res.ok) throw new Error('Network error');\n    const data = await res.json();\n    \n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    appendMessage('assistant', data.reply || '[No response]');\n    statusEl.textContent = 'Online';\n    statusEl.style.color = '#00d4ff';\n    \n  } catch (err) {\n    appendMessage('assistant', 'Error: ' + (err?.message || err));\n    statusEl.textContent = 'Error';\n    statusEl.style.color = '#ef4444';\n  } finally {\n    sendBtn.disabled = false;\n    sendBtn.textContent = 'Send';\n  }\n}\n\n// Auto-resize textarea\ninputEl.addEventListener('input', () => {\n  inputEl.style.height = 'auto';\n  inputEl.style.height = Math.min(inputEl.scrollHeight, 120) + 'px';\n});\n\n// Event listeners\nsendBtn.addEventListener('click', sendMessage);\ninputEl.addEventListener('keydown', (e) => {\n  if (e.key === 'Enter' && !e.shiftKey) {\n    e.preventDefault();\n    sendMessage();\n  }\n});\n\n// Initialize everything\ncreateParticles();\ninit();\ninitGlobe();\nanimate();\n\n// Add welcome message\nsetTimeout(() => {\n  appendMessage('assistant', 'Welcome to the real GitHub Globe! Watch the dynamic flight paths and data streams flowing around the world in real-time!');\n}, 2000);\n\n// Multiple activity generators for dynamic globe\n// Generate random flight arcs between real airports\nsetInterval(() => {\n  addRandomFlightArc();\n}, 2000);\n\n// Generate data activity arcs (faster, more frequent)\nsetInterval(() => {\n  addDataActivityArc();\n}, 1500);\n\n// Generate some random chat-style arcs\nsetInterval(() => {\n  if (Math.random() > 0.7) {\n    addChatArc(Math.random() > 0.5);\n  }\n}, 3000);\n\n// Burst activity every 10 seconds\nsetInterval(() => {\n  // Generate a burst of 3-5 arcs\n  const burstCount = 3 + Math.floor(Math.random() * 3);\n  for (let i = 0; i < burstCount; i++) {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        addRandomFlightArc();\n      } else {\n        addDataActivityArc();\n      }\n    }, i * 200);\n  }\n}, 10000);\n`;\n", "import type { DurableObjectState } from '@cloudflare/workers-types'\n\nexport interface ChatMessage { role: 'system' | 'user' | 'assistant'; content: string }\n\nexport class MemoryDO {\n  state: DurableObjectState\n\n  constructor(state: DurableObjectState, env: any) {\n    this.state = state\n  }\n\n  async fetch(request: Request) {\n    const url = new URL(request.url)\n    const key = 'history'\n\n    if (request.method === 'POST' && url.pathname.endsWith('/append')) {\n      const msg = (await request.json()) as ChatMessage\n      const history: ChatMessage[] = (await this.state.storage.get(key)) || []\n      history.push(msg)\n      // Keep only last 20 interactions to control context size\n      const pruned = history.slice(-20)\n      await this.state.storage.put(key, pruned)\n      return new Response(null, { status: 204 })\n    }\n\n    if (request.method === 'GET' && url.pathname.endsWith('/history')) {\n      const history: ChatMessage[] = (await this.state.storage.get(key)) || []\n      return Response.json(history)\n    }\n\n    if (request.method === 'DELETE' && url.pathname.endsWith('/reset')) {\n      await this.state.storage.delete(key)\n      return new Response(null, { status: 204 })\n    }\n\n    return new Response('Not found', { status: 404 })\n  }\n}\n", "import { INDEX_HTML, APP_JS } from './static'\nimport { MemoryDO, type ChatMessage } from './memory_do'\nimport type { Ai, DurableObjectNamespace, ExecutionContext } from '@cloudflare/workers-types'\n\nexport interface Env {\n  AI: Ai\n  MEMORY_DO: DurableObjectNamespace<MemoryDO>\n  MODEL?: string\n}\n\nconst DEFAULT_MODEL = '@cf/meta/llama-3.3-70b-instruct'\n\nexport default {\n  fetch: async (request: Request, env: Env, ctx: ExecutionContext) => {\n    const url = new URL(request.url)\n    const { pathname } = url\n\n    if (request.method === 'GET' && pathname === '/') {\n      return new Response(INDEX_HTML, { headers: { 'content-type': 'text/html; charset=utf-8' } })\n    }\n    if (request.method === 'GET' && pathname === '/app.js') {\n      return new Response(APP_JS, { headers: { 'content-type': 'text/javascript; charset=utf-8' } })\n    }\n    \n\n    if (pathname === '/api/chat' && request.method === 'POST') {\n      const { message } = await request.json() as { message?: string }\n      if (!message || typeof message !== 'string') {\n        return Response.json({ error: 'Missing message' }, { status: 400 })\n      }\n\n      // Session via cookie; generate one if absent.\n      const cookies = request.headers.get('cookie') || ''\n      const m = /session=([^;]+)/.exec(cookies)\n      const sessionId = m?.[1] || crypto.randomUUID()\n\n      const id = env.MEMORY_DO.idFromName(sessionId)\n      const stub = env.MEMORY_DO.get(id)\n\n      // Load history\n      const historyRes = await stub.fetch(`${new URL('/history', request.url)}`)\n      const history = await historyRes.json() as ChatMessage[]\n\n      // Append the user message now\n      await stub.fetch(`${new URL('/append', request.url)}`, { method: 'POST', body: JSON.stringify({ role: 'user', content: message }) })\n\n      const systemPrompt: ChatMessage = {\n        role: 'system',\n        content: 'You are a helpful AI assistant running on Cloudflare Workers AI. Be concise, factual, and friendly. If asked about your runtime, mention Cloudflare Workers + Llama 3.3. Keep code examples short.'\n      }\n\n      const messages: ChatMessage[] = [systemPrompt, ...history, { role: 'user', content: message }]\n\n      // Call Workers AI\n      const model = env.MODEL || DEFAULT_MODEL\n\n      let reply = ''\n      try {\n        // Try Workers AI first\n        const aiRes = await env.AI.run(model as any, { messages }) as any\n        reply = aiRes?.response || aiRes?.result || aiRes?.output || ''\n      } catch (error) {\n        // Fallback to mock response for local development\n        console.log('AI call failed, using mock response:', error)\n        const errorMsg = error instanceof Error ? error.message : String(error)\n        reply = `Hello! I'm a mock AI response running on Cloudflare Workers. You asked: \"${message}\". In production, this would be powered by Llama 3.3 on Workers AI. The error was: ${errorMsg}`\n      }\n\n      // Store assistant reply in memory\n      await stub.fetch(`${new URL('/append', request.url)}`, { method: 'POST', body: JSON.stringify({ role: 'assistant', content: String(reply) }) })\n\n      const headers = new Headers({ 'content-type': 'application/json; charset=utf-8' })\n      if (!m) headers.append('Set-Cookie', `session=${sessionId}; Path=/; HttpOnly; SameSite=Lax; Max-Age=2592000`)\n\n      return new Response(JSON.stringify({ reply: String(reply), model }), { headers })\n    }\n\n    if (pathname === '/api/history' && request.method === 'GET') {\n      const cookies = request.headers.get('cookie') || ''\n      const m = /session=([^;]+)/.exec(cookies)\n      if (!m) return Response.json([])\n      const id = env.MEMORY_DO.idFromName(m[1])\n      const stub = env.MEMORY_DO.get(id)\n      const res = await stub.fetch(`${new URL('/history', request.url)}`)\n      return new Response(res.body, { headers: { 'content-type': 'application/json; charset=utf-8' } })\n    }\n\n    if (pathname === '/api/reset' && request.method === 'POST') {\n      const cookies = request.headers.get('cookie') || ''\n      const m = /session=([^;]+)/.exec(cookies)\n      if (m) {\n        const id = env.MEMORY_DO.idFromName(m[1])\n        const stub = env.MEMORY_DO.get(id)\n        await stub.fetch(`${new URL('/reset', request.url)}`, { method: 'DELETE' })\n      }\n      return new Response(null, { status: 204 })\n    }\n\n    return new Response('Not found', { status: 404 })\n  },\n}\n\n// Re-export the Durable Object class so Wrangler can bind it by name\nexport { MemoryDO } from './memory_do'\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\src\\\\worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\src\\\\worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\.wrangler\\\\tmp\\\\bundle-SHPEyg\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\.wrangler\\\\tmp\\\\bundle-SHPEyg\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\nicky\\\\OneDrive\\\\Desktop\\\\ai\\\\cf_ai_agents_demo\\\\.wrangler\\\\tmp\\\\bundle-SHPEyg\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAO,IAAM,aAAawZnpZf,IAAM,WAAN,MAAe;AAAA,EAJtB,OAIsB;AAAA;AAAA;AAAA,EACpB;AAAA,EAEA,YAAY,OAA2B,KAAU;AAC/C,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,MAAM,MAAM,SAAkB;AAC5B,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,MAAM;AAEZ,QAAI,QAAQ,WAAW,UAAU,IAAI,SAAS,SAAS,SAAS,GAAG;AACjE,YAAM,MAAO,MAAM,QAAQ,KAAK;AAChC,YAAM,UAA0B,MAAM,KAAK,MAAM,QAAQ,IAAI,GAAG,KAAM,CAAC;AACvE,cAAQ,KAAK,GAAG;AAEhB,YAAM,SAAS,QAAQ,MAAM,GAAG;AAChC,YAAM,KAAK,MAAM,QAAQ,IAAI,KAAK,MAAM;AACxC,aAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3C;AAEA,QAAI,QAAQ,WAAW,SAAS,IAAI,SAAS,SAAS,UAAU,GAAG;AACjE,YAAM,UAA0B,MAAM,KAAK,MAAM,QAAQ,IAAI,GAAG,KAAM,CAAC;AACvE,aAAO,SAAS,KAAK,OAAO;AAAA,IAC9B;AAEA,QAAI,QAAQ,WAAW,YAAY,IAAI,SAAS,SAAS,QAAQ,GAAG;AAClE,YAAM,KAAK,MAAM,QAAQ,OAAO,GAAG;AACnC,aAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3C;AAEA,WAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,EAClD;AACF;;;AC3BA,IAAM,gBAAgB;AAEtB,IAAO,iBAAQ;AAAA,EACb,OAAO,8BAAO,SAAkB,KAAU,QAA0B;AAClE,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,EAAE,SAAS,IAAI;AAErB,QAAI,QAAQ,WAAW,SAAS,aAAa,KAAK;AAChD,aAAO,IAAI,SAAS,YAAY,EAAE,SAAS,EAAE,gBAAgB,2BAA2B,EAAE,CAAC;AAAA,IAC7F;AACA,QAAI,QAAQ,WAAW,SAAS,aAAa,WAAW;AACtD,aAAO,IAAI,SAAS,QAAQ,EAAE,SAAS,EAAE,gBAAgB,iCAAiC,EAAE,CAAC;AAAA,IAC/F;AAGA,QAAI,aAAa,eAAe,QAAQ,WAAW,QAAQ;AACzD,YAAM,EAAE,QAAQ,IAAI,MAAM,QAAQ,KAAK;AACvC,UAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,eAAO,SAAS,KAAK,EAAE,OAAO,kBAAkB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MACpE;AAGA,YAAM,UAAU,QAAQ,QAAQ,IAAI,QAAQ,KAAK;AACjD,YAAM,IAAI,kBAAkB,KAAK,OAAO;AACxC,YAAM,YAAY,IAAI,CAAC,KAAK,OAAO,WAAW;AAE9C,YAAM,KAAK,IAAI,UAAU,WAAW,SAAS;AAC7C,YAAM,OAAO,IAAI,UAAU,IAAI,EAAE;AAGjC,YAAM,aAAa,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI,YAAY,QAAQ,GAAG,CAAC,EAAE;AACzE,YAAM,UAAU,MAAM,WAAW,KAAK;AAGtC,YAAM,KAAK,MAAM,GAAG,IAAI,IAAI,WAAW,QAAQ,GAAG,CAAC,IAAI,EAAE,QAAQ,QAAQ,MAAM,KAAK,UAAU,EAAE,MAAM,QAAQ,SAAS,QAAQ,CAAC,EAAE,CAAC;AAEnI,YAAM,eAA4B;AAAA,QAChC,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAEA,YAAM,WAA0B,CAAC,cAAc,GAAG,SAAS,EAAE,MAAM,QAAQ,SAAS,QAAQ,CAAC;AAG7F,YAAM,QAAQ,IAAI,SAAS;AAE3B,UAAI,QAAQ;AACZ,UAAI;AAEF,cAAM,QAAQ,MAAM,IAAI,GAAG,IAAI,OAAc,EAAE,SAAS,CAAC;AACzD,gBAAQ,OAAO,YAAY,OAAO,UAAU,OAAO,UAAU;AAAA,MAC/D,SAAS,OAAO;AAEd,gBAAQ,IAAI,wCAAwC,KAAK;AACzD,cAAM,WAAW,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACtE,gBAAQ,4EAA4E,OAAO,sFAAsF,QAAQ;AAAA,MAC3L;AAGA,YAAM,KAAK,MAAM,GAAG,IAAI,IAAI,WAAW,QAAQ,GAAG,CAAC,IAAI,EAAE,QAAQ,QAAQ,MAAM,KAAK,UAAU,EAAE,MAAM,aAAa,SAAS,OAAO,KAAK,EAAE,CAAC,EAAE,CAAC;AAE9I,YAAM,UAAU,IAAI,QAAQ,EAAE,gBAAgB,kCAAkC,CAAC;AACjF,UAAI,CAAC,EAAG,SAAQ,OAAO,cAAc,WAAW,SAAS,mDAAmD;AAE5G,aAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,OAAO,KAAK,GAAG,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC;AAAA,IAClF;AAEA,QAAI,aAAa,kBAAkB,QAAQ,WAAW,OAAO;AAC3D,YAAM,UAAU,QAAQ,QAAQ,IAAI,QAAQ,KAAK;AACjD,YAAM,IAAI,kBAAkB,KAAK,OAAO;AACxC,UAAI,CAAC,EAAG,QAAO,SAAS,KAAK,CAAC,CAAC;AAC/B,YAAM,KAAK,IAAI,UAAU,WAAW,EAAE,CAAC,CAAC;AACxC,YAAM,OAAO,IAAI,UAAU,IAAI,EAAE;AACjC,YAAM,MAAM,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI,YAAY,QAAQ,GAAG,CAAC,EAAE;AAClE,aAAO,IAAI,SAAS,IAAI,MAAM,EAAE,SAAS,EAAE,gBAAgB,kCAAkC,EAAE,CAAC;AAAA,IAClG;AAEA,QAAI,aAAa,gBAAgB,QAAQ,WAAW,QAAQ;AAC1D,YAAM,UAAU,QAAQ,QAAQ,IAAI,QAAQ,KAAK;AACjD,YAAM,IAAI,kBAAkB,KAAK,OAAO;AACxC,UAAI,GAAG;AACL,cAAM,KAAK,IAAI,UAAU,WAAW,EAAE,CAAC,CAAC;AACxC,cAAM,OAAO,IAAI,UAAU,IAAI,EAAE;AACjC,cAAM,KAAK,MAAM,GAAG,IAAI,IAAI,UAAU,QAAQ,GAAG,CAAC,IAAI,EAAE,QAAQ,SAAS,CAAC;AAAA,MAC5E;AACA,aAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3C;AAEA,WAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,EAClD,GAtFO;AAuFT;;;AClGA,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAQ;AAChB,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
